/*
3. 字频统计
问题描述

在一个只有字母'a'和'b'组成的字符串中，统计子串"ab"和"ba"出现次数的差。

输入格式

有多组测试数据。

每组测试数据第一行是一个正整数N，表示字符串长度，接下来一行是长度为N的字符串，字符串中只有字母'a'和'b'。

N=0表示输入结束，并且不需要处理。

40%的数列元素个数N 1 ≤ N≤ 100；

30%的数列元素个数N 1 ≤ N≤ 1000；

20%的数列元素个数N 1 ≤ N≤ 10000；

10%的数列元素个数N 1 ≤ N≤ 100000；

输出格式

  　　对于每组测试数据，输出一个整数："ab"和"ba"出现次数的差。

样例输入


7
aaaaaaa
4
abab
0
样例输出


0
*/
/**
 * @file frequency_difference.cpp
 * @brief 字频统计问题的高效解决方案
 *
 * 核心思路:
 * 这个问题的本质是计算字符串中从'a'到'b'的状态转换次数与从'b'到'a'的状态转换次数的差值。
 * 我们可以将整个字符串看作一个状态序列。子串"ab"代表一次从'a'到'b'的转换，而"ba"代表一次从'b'到'a'的转换。
 * 在一个序列中，从状态A转换到状态B的次数，与从状态B转换回状态A的次数，其差值最多为1。这个差值完全取决于序列的起始状态和结束状态。
 * 1. 如果起始和结束状态相同 (a...a 或 b...b)，那么 a->b 的转换次数必须等于 b->a 的转换次数，才能回到初始状态。因此差值为0。
 * 2. 如果从'a'开始，到'b'结束 (a...b)，那么 a->b 的转换次数必然比 b->a 的转换次数多一次。因此差值为1。
 * 3. 如果从'b'开始，到'a'结束 (b...a)，那么 b->a 的转换次数必然比 a->b 的转换次数多一次，即 count("ab") - count("ba") = -1。
 * 综上，我们只需要比较字符串的第一个和最后一个字符即可得出结论，无需遍历整个字符串。
 *
 * 时间复杂度: O(N)
 * 瓶颈在于读取长度为 N 的字符串。核心计算逻辑本身的时间复杂度为 O(1)。
 *
 * 空间复杂度: O(N)
 * 需要 O(N) 的空间来存储输入的字符串。计算过程的额外空间是 O(1)。
 */

#include <iostream>
#include <string>
#include <vector>

// 启用C++标准库，无需显式使用 std:: 前缀
using namespace std;

/**
 * @brief 计算字符串中"ab"和"ba"出现次数的差值
 * @param text 只包含'a'和'b'的输入字符串
 * @return "ab"的出现次数减去"ba"的出现次数
 */
int calculateSubstringDifference(const string& text) {
    // 边界条件处理：如果字符串长度小于2，无法形成"ab"或"ba"
    if (text.length() < 2) {
        return 0;
    }

    // 核心逻辑：仅根据首尾字符判断
    if (text.front() == text.back()) {
        // 首尾相同 (a...a 或 b...b)，状态转换成对出现，差值为0
        return 0;
    }

    // 首尾不同，差值为1或-1。由首字符决定。
    // 如果以'a'开头，则必然以'b'结尾，a->b比b->a多一次
    // 如果以'b'开头，则必然以'a'结尾，b->a比a->b多一次
    return (text.front() == 'a') ? 1 : -1;
}

int main() {
    // 优化I/O性能
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    /*
     * --- 测试用例说明 ---
     * 【样例输入】
     * 7
     * aaaaaaa
     * 4
     * abab
     * 0
     *
     * 【样例输出】
     * 0
     * 1
     *
     * --- 其他关键测试用例 ---
     * 输入 N=4, text="baba"   -> 输出: -1 (b...a)
     * 输入 N=4, text="aabb"   -> 输出: 1  (a...b)
     * 输入 N=5, text="ababa"  -> 输出: 0  (a...a)
     * 输入 N=1, text="b"      -> 输出: 0  (长度小于2)
     */

    int n;
    // 循环读取输入，直到N为0，这是题目要求的输入结束标志
    while (cin >> n && n != 0) {
        string s;
        cin >> s;
        cout << calculateSubstringDifference(s) << endl;
    }

    return 0;
}